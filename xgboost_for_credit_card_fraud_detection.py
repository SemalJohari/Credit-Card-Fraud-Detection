# -*- coding: utf-8 -*-
"""XGBoost for Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vSAprp5u3sw1dWQK2PpZWKIc8EjZujhN
"""

import xgboost as xgb
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import seaborn as sns

creditcard_df = pd.read_csv('creditcard.csv')
creditcard_df.columns = [x.lower() for x in creditcard_df.columns]

X = creditcard_df.drop('class', axis=1)
y = creditcard_df['class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=4)

creditcard_df.head()

xg_cl = xgb.XGBClassifier(objective='binary:logistic', n_estimators=10, seed=123)
xg_cl.fit(X_train, y_train)

def func(pct, allvals):
  absolute = int(round(pct/100.*np.sum(allvals)))
  return "{:.1f}%\n({:d} )".format(pct, absolute)

def drawPieChart(label, data, title):
  fig, ax = plt.subplots(figsize=(6, 3), subplot_kw=dict(aspect="equal"))
  wedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),
                                    textprops=dict(color="w"))
  bbox_props = dict(boxstyle="square,pad=0.3", fc="w", ec="k", lw=0.72)
  kw = dict(arrowprops=dict(arrowstyle="-"), bbox=bbox_props, zorder=0, va="center")
  for i, p in enumerate(wedges):
    ang = (p.theta2 - p.theta1)/2. + p.theta1
    y = np.sin(np.deg2rad(ang))
    x = np.cos(np.deg2rad(ang))
    horizontalalignment = {-1: "right", 1: "left"}[int(np.sign(x))]
    connectionstyle = "angle,angleA=0,angleB={}".format(ang)
    kw["arrowprops"].update({"connectionstyle": connectionstyle})
    ax.annotate(label[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),
                horizontalalignment=horizontalalignment, **kw)
    plt.title(title)

sns.scatterplot(data=creditcard_df, x='time', y='amount', hue='class')

y_pred = xg_cl.predict(X_test)
print("Predicted fraud count: ", len(y_pred[y_pred == 1]))
buffer=pd.Series(y_pred)
drawPieChart(['Non Fraud', 'Fraud'], buffer.value_counts(), "Predicted Frauds")

fpr, tpr, thresholds = roc_curve(y_test, y_pred)
roc = pd.DataFrame({'FPR':fpr, 'TPR':tpr, 'Thresholds':thresholds})

_ = plt.figure()
plt.plot(roc.FPR, roc.TPR)
plt.axvline(0.1, color="#00C851", linestyle='--')
plt.xlabel("FPR")
plt.ylabel("TPR")
plt.show()

dmatrix=xgb.DMatrix(data=creditcard_df.iloc[:,:-1],
                    label=creditcard_df['class'])
params={"objective":"binary:logistic","max_depth":4}
cv_results=xgb.cv(dtrain=dmatrix, params=params, nfold=4,
                  num_boost_round=10, metrics="error", as_pandas=True)
print("Accuracy: %f" %((1-cv_results["test-error-mean"].iloc[-1])))

cv_results=xgb.cv(dtrain=dmatrix, params=params, nfold=3,
                  num_boost_round=5, metrics="auc", as_pandas=True, seed=123)
print(cv_results)

import pickle as pk
from google.colab import files

pk.dump(xg_cl, open('model.pkl', 'wb'))
files.download('model.pkl')